import type { PrivateStateProvider, PrivateStateSchema, PublicDataProvider, PrivateStateKey } from '@midnight-ntwrk/midnight-js-types';
import type { ContractAddress, ZswapChainState } from '@midnight-ntwrk/ledger';
import type { ContractState } from '@midnight-ntwrk/compact-runtime';
/**
 * General object holding states for particular contract.
 */
export type ContractStates<PS> = {
    /**
     * The (public) Zswap chain state of a contract.
     */
    readonly zswapChainState: ZswapChainState;
    /**
     * The (public) ledger state of a contract.
     */
    readonly contractState: ContractState;
    /**
     * The private state of a contract.
     */
    readonly privateState: PS;
};
/**
 * Retrieves the Zswap, ledger, and private states of the contract corresponding
 * to the given identifier using the given providers.
 *
 * @param publicDataProvider The provider to use to fetch the public states (Zswap and ledger).
 * @param privateStateProvider The provider to use to fetch the private state.
 * @param contractAddress The ledger address of the contract.
 * @param privateStateKey The identifier for the private state of the contract.
 */
export declare const getStates: <PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>>(publicDataProvider: PublicDataProvider, privateStateProvider: PrivateStateProvider<PSS>, contractAddress: ContractAddress, privateStateKey: PSK) => Promise<ContractStates<PSS[PSK]>>;
//# sourceMappingURL=get-states.d.ts.map