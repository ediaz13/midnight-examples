import type { MidnightProviders, PrivateStateKey, PrivateStateSchema } from '@midnight-ntwrk/midnight-js-types';
import type { Contract, ImpureCircuitId } from './contract-model';
import type { FinalizedCallTxData } from './tx-model';
import { type CallTxOptions } from './unproven-call-tx';
/**
 * Creates and submits a transaction for the invocation of a circuit on a given contract.
 *
 * @param providers The providers used to manage the invocation lifecycle.
 * @param options Configuration.
 *
 * @returns A `Promise` that resolves with the finalized transaction data for the invocation of
 *         `circuitId` on `contract` with the given `args`; or rejects with an error if the invocation fails.
 */
export declare const submitCallTx: <PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>, C extends Contract<PSS[PSK]>, ICKS extends ImpureCircuitId<C>, ICK extends ICKS>(providers: MidnightProviders<ICKS, PSS>, options: CallTxOptions<PSS, PSK, C, ICK>) => Promise<FinalizedCallTxData<PSS[PSK], C, ICK>>;
//# sourceMappingURL=submit-call-tx.d.ts.map