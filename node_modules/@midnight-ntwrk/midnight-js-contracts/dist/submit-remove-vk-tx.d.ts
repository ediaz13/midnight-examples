import { type FinalizedTxData, type MidnightProviders, type PrivateStateKey, type PrivateStateSchema } from '@midnight-ntwrk/midnight-js-types';
import type { ContractAddress } from '@midnight-ntwrk/ledger';
import type { ImpureCircuitId } from './contract-model';
/**
 * Constructs and submits a transaction that removes the current verifier key stored
 * on the blockchain for the given circuit ID at the given contract address.
 *
 * @param providers The providers to use to manage the transaction lifecycle.
 * @param privateStateKey The private state key for the contract.
 * @param contractAddress The address of the contract containing the circuit for which
 *                        the verifier key should be removed.
 * @param circuitId The circuit for which the verifier key should be removed.
 *
 * @returns A promise that resolves with the finalized transaction data, or rejects if
 *          an error occurs along the way.
 *
 * TODO: We'll likely want to modify ZKConfigProvider provider so that the verifier keys are
 *       automatically rotated in this function. This likely involves storing key versions
 *       along with keys in ZKConfigProvider. By default, artifacts for the latest version
 *       would be fetched to build transactions.
 */
export declare const submitRemoveVerifierKeyTx: <PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>>(providers: MidnightProviders, privateStateKey: PSK, contractAddress: ContractAddress, circuitId: ImpureCircuitId) => Promise<FinalizedTxData>;
//# sourceMappingURL=submit-remove-vk-tx.d.ts.map