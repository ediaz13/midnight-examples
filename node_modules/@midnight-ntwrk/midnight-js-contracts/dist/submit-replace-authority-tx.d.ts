import { type FinalizedTxData, type MidnightProviders, type PrivateStateKey, type PrivateStateSchema } from '@midnight-ntwrk/midnight-js-types';
import type { ContractAddress, SigningKey } from '@midnight-ntwrk/ledger';
/**
 * Constructs and submits a transaction that replaces the maintenance
 * authority stored on the blockchain for this contract. After the transaction is
 * finalized, the current signing key stored in the given private state provider
 * is overwritten with the given new authority key.
 *
 * @param providers The providers to use to manage the transaction lifecycle.
 * @param privateStateKey THe key at which the contract being update has its state stored.
 * @param contractAddress The address of the contract for which the maintenance
 *                        authority should be updated.
 *
 * TODO: There are at least three options we should support in the future:
 *       1. Replace authority and maintain key (current).
 *       2. Replace authority and do not maintain key.
 *       3. Add additional authorities and maintain original key.
 */
export declare const submitReplaceAuthorityTx: <PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>>(providers: MidnightProviders, privateStateKey: PSK, contractAddress: ContractAddress) => (newAuthority: SigningKey) => Promise<FinalizedTxData>;
//# sourceMappingURL=submit-replace-authority-tx.d.ts.map