import type { FinalizedTxData, MidnightProviders } from '@midnight-ntwrk/midnight-js-types';
import type { UnprovenTransaction } from '@midnight-ntwrk/ledger';
import type { CoinInfo } from '@midnight-ntwrk/compact-runtime';
import type { Contract, ImpureCircuitId } from './contract-model';
/**
 * Configuration for {@link submitTx}.
 */
export type SubmitTxOptions<ICK extends ImpureCircuitId> = {
    /**
     * The transaction to prove, balance, and submit.
     */
    readonly unprovenTx: UnprovenTransaction;
    /**
     * Any new coins created during the construction of the transaction. Only defined
     * if the transaction being submitted is a call or deploy transaction.
     */
    readonly newCoins?: CoinInfo[];
    /**
     * A circuit identifier to use to fetch the ZK artifacts needed to prove the
     * transaction. Only defined if a call transaction is being submitted.
     */
    readonly circuitId?: ICK;
};
/**
 * Proves, balances, and submits an unproven deployment or call transaction using
 * the given providers, according to the given options.
 *
 * @param providers The providers used to manage the transaction lifecycle.
 * @param options Configuration.
 *
 * @returns A promise that resolves with the finalized transaction data for the invocation,
 *          or rejects if an error occurs along the way.
 */
export declare const submitTx: <C extends Contract, ICK extends ImpureCircuitId<C>>(providers: MidnightProviders<ICK>, options: SubmitTxOptions<ICK>) => Promise<FinalizedTxData>;
//# sourceMappingURL=submit-tx.d.ts.map