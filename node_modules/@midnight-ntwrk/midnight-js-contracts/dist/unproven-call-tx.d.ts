import type { PrivateStateProvider, PrivateStateSchema, PublicDataProvider, PrivateStateKey, WalletProvider } from '@midnight-ntwrk/midnight-js-types';
import { type ZswapChainState } from '@midnight-ntwrk/ledger';
import type { Contract, ImpureCircuitId } from './contract-model';
import type { UnsubmittedCallTxData } from './tx-model';
import { type CallOptions, type CallOptionsBaseWithArguments } from './call';
/**
 * Calls a circuit using the provided initial `states` and creates an unbalanced,
 * unproven, unsubmitted, call transaction.
 *
 * @param initialZswapChainState The contract's initial Zswap chain state.
 * @param options Configuration.
 *
 * @returns A promise that contains all data produced by the circuit call and an unproven
 *          transaction assembled from the call result.
 */
export declare const createUnprovenCallTxFromInitialStates: <PS, C extends Contract<PS>, ICK extends ImpureCircuitId<C>>(initialZswapChainState: ZswapChainState, options: CallOptions<PS, C, ICK>) => Promise<UnsubmittedCallTxData<PS, C, ICK>>;
/**
 * Configuration for creating call transactions.
 */
export type CallTxOptions<PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>, C extends Contract<PSS[PSK]>, ICK extends ImpureCircuitId<C>> = CallOptionsBaseWithArguments<C, ICK> & {
    /**
     * The identifier for the private state of the contract.
     */
    readonly privateStateKey: PSK;
};
/**
 * Calls a circuit using states fetched from the public data provider and private state
 * provider, then creates an unbalanced, unproven, unsubmitted, call transaction.
 *
 * @param publicDataProvider The provider to use to fetch the contract ledger and Zswap chain states.
 * @param privateStateProvider The provider to use to fetch the contract private state.
 * @param walletProvider The provider to use to fetch the current user's Zswap coin public key.
 * @param options Configuration.
 *
 * @returns A promise that contains all data produced by the circuit call and an unproven
 *          transaction assembled from the call result.
 */
export declare const createUnprovenCallTx: <PSS extends PrivateStateSchema, PSK extends PrivateStateKey<PSS>, C extends Contract<PSS[PSK]>, ICK extends ImpureCircuitId<C>>(publicDataProvider: PublicDataProvider, privateStateProvider: PrivateStateProvider<PSS>, walletProvider: WalletProvider, options: CallTxOptions<PSS, PSK, C, ICK>) => Promise<UnsubmittedCallTxData<PSS[PSK], C, ICK>>;
//# sourceMappingURL=unproven-call-tx.d.ts.map