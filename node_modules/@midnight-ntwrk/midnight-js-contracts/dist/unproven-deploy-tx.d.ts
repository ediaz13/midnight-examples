import type { ZKConfigProvider, VerifierKey, WalletProvider } from '@midnight-ntwrk/midnight-js-types';
import type { SigningKey, CoinPublicKey } from '@midnight-ntwrk/compact-runtime';
import { type Contract, type ImpureCircuitId, type InitialStateParameters } from './contract-model';
import type { UnsubmittedDeployTxData } from './tx-model';
/**
 * Calls a contract constructor and creates an unbalanced, unproven, unsubmitted, deploy transaction
 * from the constructor results.
 *
 * @param verifierKeys The verifier keys for the contract being deployed.
 * @param coinPublicKey The Zswap coin public key of the current user.
 * @param options Configuration.
 *
 * @returns A promise that contains all data produced by the contract constructor call and an unproven
 *          deployment transaction assembled from the contract constructor result.
 */
export declare const createUnprovenDeployTxFromVerifierKeys: <PS, C extends Contract<PS>>(verifierKeys: [ImpureCircuitId<C>, VerifierKey][], coinPublicKey: CoinPublicKey, options: DeployTxOptions<PS, C>) => Promise<UnsubmittedDeployTxData<PS>>;
/**
 * Base type for deployment transaction configuration.
 */
export type DeployTxOptionsBase<PS, C extends Contract<PS>> = {
    /**
     * The contract to use to execute circuits.
     */
    readonly contract: C;
    /**
     * The initial contract private state to run the contract constructor against.
     */
    readonly initialPrivateState: PS;
};
/**
 * Complete deployment transaction configuration.
 */
export type DeployTxOptionsBaseWithArguments<PS, C extends Contract<PS>> = InitialStateParameters<C> extends [] ? DeployTxOptionsBase<PS, C> : DeployTxOptionsBase<PS, C> & {
    /**
     * Arguments to pass to the contract constructor
     */
    readonly args: InitialStateParameters<C>;
};
/**
 * Complete deployment transaction configuration.
 */
export type DeployTxOptions<PS, C extends Contract<PS>> = DeployTxOptionsBaseWithArguments<PS, C> & {
    /**
     * The signing key to add as the to-be-deployed contract's maintenance authority.
     */
    readonly signingKey: SigningKey;
};
/**
 * Calls a contract constructor and creates an unbalanced, unproven, unsubmitted, deploy transaction
 * from the constructor results.
 *
 * @param zkConfigProvider The provider to use to fetch ZK artifacts.
 * @param walletProvider The provider to use to get the current user's Zswap coin public key.
 * @param options Configuration.
 *
 * @returns A promise that contains all data produced by the constructor call and an unproven
 *          transaction assembled from the constructor result.
 */
export declare const createUnprovenDeployTx: <PS, C extends Contract<PS>>(zkConfigProvider: ZKConfigProvider<ImpureCircuitId<C>>, walletProvider: WalletProvider, options: DeployTxOptions<PS, C>) => Promise<UnsubmittedDeployTxData<PS>>;
//# sourceMappingURL=unproven-deploy-tx.d.ts.map