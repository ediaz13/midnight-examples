'use strict';

var fetch = require('cross-fetch');
var ledger = require('@midnight-ntwrk/ledger');
var borsh = require('@dao-xyz/borsh');
var midnightJsTypes = require('@midnight-ntwrk/midnight-js-types');
var _ = require('lodash');
var midnightJsNetworkId = require('@midnight-ntwrk/midnight-js-network-id');

/**
 * Serializes a {@link ZKConfig} using Borsh format.
 *
 * @param zkConfig The configuration to serialize.
 */
const serializeZKConfig = (zkConfig) => {
    // Borsh serialized as a one element hash map with 'circuitId' as a key
    const binaryWriter = new borsh.BinaryWriter();
    // This 'u8' has no purpose. It's a workaround for an issue with ledger 3.0.0
    binaryWriter.u8(0);
    if (zkConfig) {
        binaryWriter.u32(1);
        binaryWriter.string(zkConfig.circuitId);
        borsh.BinaryWriter.uint8ArrayFixed(zkConfig.proverKey, binaryWriter);
        borsh.BinaryWriter.uint8ArrayFixed(zkConfig.verifierKey, binaryWriter);
        borsh.BinaryWriter.uint8ArrayFixed(zkConfig.zkir, binaryWriter);
    }
    else {
        binaryWriter.u32(0);
    }
    return binaryWriter.finalize();
};
/**
 * Creates a serialized proving server payload from the given transaction and
 * ZK configuration.
 *
 * @param unprovenTx The transaction being proven.
 * @param zkConfig The ZK artifacts needed to prove the transaction. Undefined
 *                 if a deployment transaction is being proven.
 */
const serializePayload = (unprovenTx, zkConfig) => new Blob([unprovenTx.serialize(midnightJsNetworkId.getLedgerNetworkId()), serializeZKConfig(zkConfig)]).arrayBuffer();
const deserializePayload = (arrayBuffer) => midnightJsTypes.createUnbalancedTx(ledger.Transaction.deserialize(new Uint8Array(arrayBuffer), midnightJsNetworkId.getLedgerNetworkId()));
const PROVE_TX_PATH = '/prove-tx';
/**
 * The default configuration for the proof server client.
 */
const DEFAULT_CONFIG = {
    /**
     * The default timeout for prove requests.
     */
    timeout: 300000,
    /**
     * The default ZK configuration to use. It is overwritten with a proper ZK
     * configuration only if a call transaction is being proven.
     */
    zkConfig: undefined
};
/**
 * Creates a {@link ProofProvider} by creating a client for a running proof server.
 * Allows for HTTP and HTTPS. The data passed to 'proveTx' are intended to be
 * secret, so usage of this function should be heavily scrutinized.
 *
 * @param url The url of a running proof server.
 */
const httpClientProofProvider = (url) => {
    // To validate the url, we use the URL constructor
    const urlObject = new URL(url + PROVE_TX_PATH);
    if (urlObject.protocol !== 'http:' && urlObject.protocol !== 'https:') {
        throw new Error(`Invalid protocol: ${urlObject.protocol}`);
    }
    return {
        async proveTx(unprovenTx, partialProveTxConfig) {
            const config = _.defaults(partialProveTxConfig, DEFAULT_CONFIG);
            const response = await fetch(urlObject, {
                method: 'POST',
                body: await serializePayload(unprovenTx, config.zkConfig),
                signal: AbortSignal.timeout(config.timeout)
            });
            // TODO: More sophisticated error handling
            // TODO: Check that response is valid format (has arrayBuffer content-type)
            if (!response.ok) {
                throw new Error(response.statusText);
            }
            return deserializePayload(await response.arrayBuffer());
        }
    };
};

exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
exports.httpClientProofProvider = httpClientProofProvider;
exports.serializePayload = serializePayload;
exports.serializeZKConfig = serializeZKConfig;
//# sourceMappingURL=index.cjs.map
