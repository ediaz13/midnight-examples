import type { SigningKey } from '@midnight-ntwrk/compact-runtime';
/**
 * Type representing valid private state schemas. Each value is a private state
 * for a particular contract. Each key is the name used to refer to a private state.
 */
export type PrivateStateSchema = Record<string, any>;
/**
 * A string key of a {@link PrivateStateSchema} object.
 */
export type PrivateStateKey<PSS extends PrivateStateSchema = PrivateStateSchema> = keyof PSS & string;
/**
 * Interface for a typed key-valued store containing contract private states.
 *
 * @typeParam PSS - The schema for the private states stored. Each value is a
 *                  private state for a particular contract. Each key is the name
 *                  used to refer to a private state.
 */
export interface PrivateStateProvider<PSS extends PrivateStateSchema = PrivateStateSchema> {
    /**
     * Store the given private state at the given key.
     *
     * @param key The private state identifier.
     * @param state The private state to store.
     */
    set<PSK extends PrivateStateKey<PSS>>(key: PSK, state: PSS[PSK]): Promise<void>;
    /**
     * Retrieve the private state at the given key.
     *
     * @param key The private state identifier.
     */
    get<PSK extends PrivateStateKey<PSS>>(key: PSK): Promise<PSS[PSK] | null>;
    /**
     * Remove the value at the given key.
     *
     * @param key The private state identifier.
     */
    remove<PSK extends PrivateStateKey<PSS>>(key: PSK): Promise<void>;
    /**
     * Remove all contract private states.
     */
    clear(): Promise<void>;
    /**
     * Store the given private state at the given key.
     *
     * @param key The private state identifier.
     * @param signingKey The signing key to store.
     */
    setSigningKey<PSK extends PrivateStateKey<PSS>>(key: PSK, signingKey: SigningKey): Promise<void>;
    /**
     * Retrieve the signing key for a contract.
     *
     * @param key The private state identifier.
     */
    getSigningKey<PSK extends PrivateStateKey<PSS>>(key: PSK): Promise<SigningKey | null>;
    /**
     * Remove the signing key for a contract.
     *
     * @param key The private state identifier.
     */
    removeSigningKey<PSK extends PrivateStateKey<PSS>>(key: PSK): Promise<void>;
    /**
     * Remove all contract signing keys.
     */
    clearSigningKeys(): Promise<void>;
}
//# sourceMappingURL=private-state-provider.d.ts.map