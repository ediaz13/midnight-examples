import type { PrivateStateProvider, PrivateStateSchema } from './private-state-provider';
import type { PublicDataProvider } from './public-data-provider';
import type { ProofProvider } from './proof-provider';
import type { WalletProvider } from './wallet-provider';
import type { MidnightProvider } from './midnight-provider';
import type { ZKConfigProvider } from './zk-config-provider';
/**
 * Set of providers needed for transaction construction and submission.
 * @typeParam ICK - A union of string literal types representing the callable circuits.
 * @typeParam PSS - Type representing aggregate of all private state types stored by the private state provider.
 */
export interface MidnightProviders<ICK extends string = string, PSS extends PrivateStateSchema = PrivateStateSchema> {
    /**
     * Manages the private state of a contract.
     */
    readonly privateStateProvider: PrivateStateProvider<PSS>;
    /**
     * Retrieves public data from the blockchain.
     */
    readonly publicDataProvider: PublicDataProvider;
    /**
     * Retrieves the ZK artifacts of a contract needed to create proofs.
     */
    readonly zkConfigProvider: ZKConfigProvider<ICK>;
    /**
     * Creates proven, unbalanced transactions.
     */
    readonly proofProvider: ProofProvider<ICK>;
    /**
     * Creates proven, balanced transactions.
     */
    readonly walletProvider: WalletProvider;
    /**
     * Submits proven, balanced transactions to the network.
     */
    readonly midnightProvider: MidnightProvider;
}
//# sourceMappingURL=providers.d.ts.map