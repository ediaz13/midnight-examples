import * as fc from 'fast-check';
function wrapProp(prop) {
    return (...args) => Promise.resolve(prop(...args));
}
function internalTestProp(testFn, label, arbitraries, prop, params) {
    const customParams = params || {};
    if (customParams.seed === undefined)
        customParams.seed = Date.now();
    const promiseProp = wrapProp(prop);
    testFn(`${label} (with seed=${customParams.seed})`, async () => {
        await fc.assert(fc.asyncProperty(...arbitraries, promiseProp), params);
    });
}
export function testProp(label, arbitraries, prop, params) {
    internalTestProp(test, label, arbitraries, prop, params);
}
(function (testProp) {
    testProp.only = (label, arbitraries, prop, params) => internalTestProp(test.only, label, arbitraries, prop, params);
    testProp.skip = (label, arbitraries, prop, params) => internalTestProp(test.skip, label, arbitraries, prop, params);
    testProp.todo = (label, arbitraries) => test.todo(label);
})(testProp || (testProp = {}));
export function itProp(label, arbitraries, prop, params) {
    internalTestProp(it, label, arbitraries, prop, params);
}
(function (itProp) {
    itProp.only = (label, arbitraries, prop, params) => internalTestProp(it.only, label, arbitraries, prop, params);
    itProp.skip = (label, arbitraries, prop, params) => internalTestProp(it.skip, label, arbitraries, prop, params);
    itProp.todo = (label, arbitraries) => it.todo(label);
})(itProp || (itProp = {}));
export { fc };
