import * as fc from 'fast-check';
declare type ArbitraryTuple<Ts extends [any] | any[]> = {
    [P in keyof Ts]: fc.Arbitrary<Ts[P]>;
};
declare type Prop<Ts extends [any] | any[]> = (...args: Ts) => boolean | void | PromiseLike<boolean | void>;
export declare function testProp<Ts extends [any] | any[]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts>): void;
export declare namespace testProp {
    const only: <Ts extends any[] | [any]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts> | undefined) => void;
    const skip: <Ts extends any[] | [any]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts> | undefined) => void;
    const todo: <Ts extends any[] | [any]>(label: string, arbitraries?: ArbitraryTuple<Ts> | undefined) => void;
}
export declare function itProp<Ts extends [any] | any[]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts>): void;
export declare namespace itProp {
    const only: <Ts extends any[] | [any]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts> | undefined) => void;
    const skip: <Ts extends any[] | [any]>(label: string, arbitraries: ArbitraryTuple<Ts>, prop: Prop<Ts>, params?: fc.Parameters<Ts> | undefined) => void;
    const todo: <Ts extends any[] | [any]>(label: string, arbitraries?: ArbitraryTuple<Ts> | undefined) => void;
}
export { fc };
