"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fc = exports.itProp = exports.testProp = void 0;
const fc = require("fast-check");
exports.fc = fc;
function wrapProp(prop) {
    return (...args) => Promise.resolve(prop(...args));
}
function internalTestProp(testFn, label, arbitraries, prop, params) {
    const customParams = params || {};
    if (customParams.seed === undefined)
        customParams.seed = Date.now();
    const promiseProp = wrapProp(prop);
    testFn(`${label} (with seed=${customParams.seed})`, async () => {
        await fc.assert(fc.asyncProperty(...arbitraries, promiseProp), params);
    });
}
function testProp(label, arbitraries, prop, params) {
    internalTestProp(test, label, arbitraries, prop, params);
}
exports.testProp = testProp;
(function (testProp) {
    testProp.only = (label, arbitraries, prop, params) => internalTestProp(test.only, label, arbitraries, prop, params);
    testProp.skip = (label, arbitraries, prop, params) => internalTestProp(test.skip, label, arbitraries, prop, params);
    testProp.todo = (label, arbitraries) => test.todo(label);
})(testProp = exports.testProp || (exports.testProp = {}));
function itProp(label, arbitraries, prop, params) {
    internalTestProp(it, label, arbitraries, prop, params);
}
exports.itProp = itProp;
(function (itProp) {
    itProp.only = (label, arbitraries, prop, params) => internalTestProp(it.only, label, arbitraries, prop, params);
    itProp.skip = (label, arbitraries, prop, params) => internalTestProp(it.skip, label, arbitraries, prop, params);
    itProp.todo = (label, arbitraries) => it.todo(label);
})(itProp = exports.itProp || (exports.itProp = {}));
